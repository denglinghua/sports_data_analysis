// run, swim, cycling
const pathes = [
    "M568.905 319.488a45.524 45.488 0 1 0 91.048 0 45.524 45.488 0 1 0-91.048 0Z M395.92 448.522c23.202-28.56 42.39-42.839 57.565-42.839h61.976c-21.76 58.293-41.811 97.772-60.153 118.437-27.511 30.998-41.408 45.489-86.932 45.489-30.349 0-56.905-15.163-79.666-45.489L273 546.362c34.436 41.42 68.945 64.96 103.526 70.622 57.444 9.404 88.613-15.714 117.04-36.003 22.763 11.372 89.608 32.89 83.908 78.067-3.8 30.118-14.466 64.746-31.997 103.886h39.137c20.585-31.408 34.67-69.856 42.258-115.344 7.587-45.489-21.867-85.36-88.364-119.615l43.16-54.446c13.51 36.34 31.646 58.302 54.407 65.883 22.762 7.582 58.72-1.306 107.873-26.664l-11.381-22.744c-38.918 9.77-65.965 10.865-81.14 3.284-22.761-11.373-16.99-40.882-34.308-70.784-19.122-33.016-32.505-45.917-53.253-58.247-20.75-12.331-102.757-18.055-137.014 5.941-22.838 15.998-40.237 38.546-52.196 67.645l21.264 10.68z",
    "M626.364 513.31a45.545 45.517 0 1 0 91.09 0 45.545 45.517 0 1 0-91.09 0Z M610.138 540.272l-13.93-75.093-36.183-73.45s-5.968-21.245-37.407-28.401c-20.96-4.77-50.133-7.88-87.52-9.328-13.786 2.304-20.68 10.12-20.68 23.45 0 13.328 6.894 22.442 20.68 27.341 49.759 1.303 76.176 4.769 79.252 10.397 4.613 8.442 20.476 46.735 8.268 53.27-12.208 6.536-83.54 44.97-92.875 48.28-9.336 3.31-53.88 29.323-53.88 29.323s22.105 28.422 53.88 35.967c31.775 7.546 49.614 5.041 66.908-4.318 17.293-9.36 26.035-20.403 49.08-31.649 15.363-7.497 36.832-9.427 64.407-5.789z M267.165 597.187c9.44-15.12 22.179-23.697 38.217-25.732 24.057-3.052 37.293-0.475 54.133 7.394 16.84 7.869 54.148 34.13 70.968 39.452 16.82 5.322 29.023 9.57 47.49 0 18.467-9.57 65.19-43.85 90.337-43.85 25.145 0 37.638 2.899 57.24 18.041 19.603 15.143 57.396 32.642 74.567 32.642 17.171 0 30.551-16.905 44.51-16.905 13.958 0 24.036 31.626 7.754 48.397-16.283 16.77-36.068 20.82-57.386 20.82-21.318 0-48.124-11.05-59.968-23.855-11.844-12.806-51.582-45.362-94.373-15.686-42.792 29.677-62.475 39.54-90.498 39.54-28.023 0-53.693-20.82-69.316-29.565-15.624-8.745-36.48-29.579-60.795-22.746-4.841 1.36-13.435 10.712-18.936 12.771-6.48 2.425-29.81 9.975-36.348-3.281-4.358-8.838-3.557-21.317 2.404-37.437z",
    "M546.143 352.556a45.524 45.556 0 1 0 91.048 0 45.524 45.556 0 1 0-91.048 0Z M654.262 717c-53.427 0-96.738-43.341-96.738-96.806 0-53.464 43.31-96.805 96.738-96.805 53.427 0 96.738 43.341 96.738 96.805C751 673.66 707.689 717 654.262 717z m0-34.167c34.57 0 62.595-28.044 62.595-62.639 0-34.594-28.025-62.638-62.595-62.638s-62.595 28.044-62.595 62.638c0 34.595 28.025 62.64 62.595 62.64zM369.738 717C316.311 717 273 673.659 273 620.194c0-53.464 43.311-96.805 96.738-96.805s96.738 43.341 96.738 96.805c0 53.465-43.31 96.806-96.738 96.806z m0-34.167c34.57 0 62.595-28.044 62.595-62.639 0-34.594-28.025-62.638-62.595-62.638s-62.595 28.044-62.595 62.638c0 34.595 28.025 62.64 62.595 62.64z M540.203 445.814l40.99 45.965h78.98c9.251-2.655 13.877-8.362 13.877-17.12 0-8.76-4.626-13.766-13.877-15.02h-63.138l-56.832-65.548c-5.608-4.912-10.805-7.369-15.591-7.369-4.787 0-9.331 2.457-13.634 7.37l-94.276 97.687c-4.754 4.241-7.13 8.76-7.13 13.56 0 4.8 2.376 9 7.13 12.602l76.1 53.547-4.834 84.681c3.1 11.487 9.742 17.23 19.925 17.23s16.737-4.962 19.663-14.885l7.292-93.187c0.317-4.158 0.317-6.939 0-8.342-0.318-1.403-1.337-3.123-3.057-5.16l-52.509-39.349 60.92-66.662z"
];
const colors = ['#c4332b', '#16B644', '#6862FD', '#FDC763'];

const layouts = [
    [[0, 0]],
    [
        [-0.25, 0],
        [0.25, 0]
    ],
    [
        [0, -0.2],
        [-0.2, 0.2],
        [0.2, 0.2]
    ],
    [
        [-0.25, -0.25],
        [-0.25, 0.25],
        [0.25, -0.25],
        [0.25, 0.25]
    ]
];


function renderCell(params, api) {
    const cellPoint = api.coord(api.value(0));
    const cellWidth = params.coordSys.cellWidth;
    const cellHeight = params.coordSys.cellHeight;
    const value = api.value(1);
    const events = value && value.split('|');
    if (isNaN(cellPoint[0]) || isNaN(cellPoint[1])) {
        return;
    }
    const group = {
        type: 'group',
        children:
            (layouts[events.length - 1] || []).map(function (
                itemLayout,
                index
            ) {
                return {
                    type: 'path',
                    shape: {
                        pathData: pathes[+events[index]],
                        x: -8,
                        y: -8,
                        width: 16,
                        height: 16
                    },
                    position: [
                        cellPoint[0] +
                        echarts.number.linearMap(
                            itemLayout[0],
                            [-0.5, 0.5],
                            [-cellWidth / 2, cellWidth / 2]
                        ),
                        cellPoint[1] +
                        echarts.number.linearMap(
                            itemLayout[1],
                            [-0.5, 0.5],
                            [-cellHeight / 2, cellHeight / 2]
                        )
                    ],
                    style: api.style({
                        fill: colors[+events[index]]
                    })
                };
            }) || []
    };
    /*
    group.children.push({
        type: 'text',
        style: {
            x: cellPoint[0],
            y: cellPoint[1] - cellHeight / 2 + 15,
            text: echarts.format.formatTime('dd', api.value(0)),
            fill: '#777',
            textFont: api.font({ fontSize: 14 })
        }
    });
    */
    return group;
}

function getData() {
    return [
        [
            "2021-01-01",
            ""
        ]
    ]
}